" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   You can find me at http://spf13.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        filetype off
        if has('vim_starting')
            set runtimepath+=~/.vim/bundle/neobundle.vim/
        endif

        call neobundle#rc(expand('~/.vim/bundle/'))
    " }

" }

" Bundles {
    " Deps
        NeoBundleFetch 'Shougo/neobundle.vim'
        NeoBundle 'MarcWeber/vim-addon-mw-utils'
        NeoBundle 'tomtom/tlib_vim'
        if executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            NeoBundle 'mileszs/ack.vim'
        elseif executable('ack')
            NeoBundle 'mileszs/ack.vim'
        elseif executable('ag')
            NeoBundle 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        endif
    " }

    " Use local bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.local"))
            source ~/.vimrc.bundles.local
        endif
    " }

    " Use fork bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.fork"))
            source ~/.vimrc.bundles.fork
        endif
    " }

    " In your .vimrc.bundles.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'neocomplcache', 'programming', 'php', 'ruby', 'python', 'go', 'twig', 'javascript', 'haskell', 'html', 'misc', 'scala']
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            NeoBundle 'scrooloose/nerdtree'
            NeoBundle 'altercation/vim-colors-solarized'
            NeoBundle 'spf13/vim-colors'
            NeoBundle 'tpope/vim-surround'
            NeoBundle 'spf13/vim-autoclose'
            NeoBundle 'kien/ctrlp.vim'
            Neobundle 'terryma/vim-multiple-cursors'
            NeoBundle 'vim-scripts/sessionman.vim'
            NeoBundle 'matchit.zip'
            if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                NeoBundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                NeoBundle 'Lokaltog/vim-powerline'
            else
                NeoBundle 'bling/vim-airline'
            endif

            NeoBundle 'Lokaltog/vim-easymotion'
            NeoBundle 'godlygeek/csapprox'
            NeoBundle 'jistr/vim-nerdtree-tabs'
            NeoBundle 'flazz/vim-colorschemes'
            NeoBundle 'mbbill/undotree'
            NeoBundle 'myusuf3/numbers.vim'
            NeoBundle 'nathanaelkane/vim-indent-guides'
            if !exists('g:spf13_no_views')
                NeoBundle 'vim-scripts/restore_view.vim'
            endif
            NeoBundle 'airblade/vim-gitgutter'
            NeoBundle 'tpope/vim-abolish.git'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            NeoBundle 'scrooloose/syntastic'
            NeoBundle 'tpope/vim-fugitive'
            NeoBundle 'mattn/webapi-vim'
            NeoBundle 'mattn/gist-vim'
            NeoBundle 'scrooloose/nerdcommenter'
            NeoBundle 'godlygeek/tabular'
            if executable('ctags')
                NeoBundle 'majutsushi/tagbar'
            endif
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'snipmate')
            NeoBundle 'garbas/vim-snipmate'
            NeoBundle 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:spf13_bundle_groups, 'neocomplcache')
            NeoBundle 'Shougo/neocomplcache'
            NeoBundle 'Shougo/neosnippet'
            NeoBundle 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplete')
			NeoBundle 'Shougo/neocomplete.vim.git'
            NeoBundle 'Shougo/neosnippet'
            NeoBundle 'honza/vim-snippets'
        endif
    " }

    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            NeoBundle 'spf13/PIV'
            NeoBundle 'arnaud-lb/vim-php-namespace'
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            NeoBundle 'klen/python-mode'
            NeoBundle 'python.vim'
            NeoBundle 'python_match.vim'
            NeoBundle 'pythoncomplete'
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            NeoBundle 'elzr/vim-json'
            NeoBundle 'groenewege/vim-less'
            NeoBundle 'pangloss/vim-javascript'
            NeoBundle 'briancollins/vim-jst'
            NeoBundle 'kchmck/vim-coffee-script'
        endif
    " }

    " Java {
        if count(g:spf13_bundle_groups, 'scala')
            NeoBundle 'derekwyatt/vim-scala'
            NeoBundle 'derekwyatt/vim-sbt'
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            NeoBundle 'travitch/hasksyn'
            NeoBundle 'dag/vim2hs'
            NeoBundle 'Twinside/vim-haskellConceal'
            NeoBundle 'lukerandall/haskellmode-vim'
            NeoBundle 'ujihisa/neco-ghc'
            NeoBundle 'eagletmt/ghcmod-vim'
            NeoBundle 'Shougo/vimproc'
            NeoBundle 'adinapoli/cumino'
            NeoBundle 'bitc/vim-hdevtools'
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            NeoBundle 'amirh/HTML-AutoCloseTag'
            NeoBundle 'hail2u/vim-css3-syntax'
            NeoBundle 'tpope/vim-haml'
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            NeoBundle 'tpope/vim-rails'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            NeoBundle 'jnwhiteh/vim-golang'
            NeoBundle 'spf13/vim-gocode'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            NeoBundle 'spf13/vim-preview'
            NeoBundle 'tpope/vim-cucumber'
            NeoBundle 'quentindecock/vim-cucumber-align-pipes'
            NeoBundle 'Puppet-Syntax-Highlighting'
        endif
    " }

    " Twig {
        if count(g:spf13_bundle_groups, 'twig')
            NeoBundle 'beyondwords/vim-twig'
        endif
    " }

    endif

" }

" General {
    " set autowrite                  " automatically write a file when leaving a modified buffer
    set shortmess+=filmnrxoOtT      " Abbrev. of messages (avoids 'hit enter')
" }

